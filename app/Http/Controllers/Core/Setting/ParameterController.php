<?php
/*   __________________________________________________
    |  Obfuscated by Tarmun - Php Obfuscator  2.0.14  |
    |              on 2024-11-23 17:36:14             |
    |                                                 |
    |_________________________________________________|
*/
 namespace App\Http\Controllers\Core\Setting; use App\Logs; use Exception; use Throwable; use Carbon\Carbon; use App\Models\Parameter; use Illuminate\Support\Arr; use Illuminate\Support\Str; use Illuminate\Http\Request; use Illuminate\Http\JsonResponse; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Hash; use Illuminate\Support\Facades\Crypt; use Illuminate\Support\Facades\Storage; use App\Http\Requests\Setting\UpdateProfileMasterRequest; class ParameterController extends Controller { protected $client_id = ''; public function __construct() { $this->middleware("\x61\165\164\150"); $this->client_id = config("\x61\x70\160\56\143\154\x69\145\156\164\x5f\151\144", ''); } public function index(Request $request) { goto pImdz; Ix66b: $logs->write("\102\x49\x4e\x44\x49\x4e\107", "\133" . implode("\x2c\40", $queries[$q]["\x62\x69\x6e\144\x69\156\x67\x73"]) . "\135"); goto bMnTT; KI9nr: $logs->write(__FUNCTION__, "\123\124\x4f\x50\xd\12"); goto TXuf4; OH3C4: DB::enableQueryLog(); goto AAZvG; ViQ7e: if (!($q < count($queries))) { goto enlH_; } goto DSlwQ; IB0CN: sE6Yv: goto GU3ZB; ic25q: $results = DB::table("\164\160\x61\x72\x61\x6d\x65\x74\145\162\x20\141\x73\x20\x61")->select(["\141\56\156\141\x6d\145", "\141\x2e\x64\145\x73\x63\162\151\160\x74\x69\157\x6e", "\x61\x2e\166\x61\154\x75\x65"])->where("\141\56\143\154\x69\x65\156\164\x5f\151\x64", $this->client_id)->where("\x61\x2e\x6e\x61\x6d\145", "\x21\75", "\141\144\144\151\x74\x69\x6f\156\x61\x6c\x5f\146\x65\141\x74\165\162\x65\163")->orderBy("\143\x72\145\x61\x74\x65\144\x5f\x61\164")->get(); goto MbBPx; DSlwQ: $sql = Str::replaceArray("\x3f", $queries[$q]["\x62\x69\156\144\151\156\147\x73"], str_replace("\77", "\x27\77\x27", $queries[$q]["\x71\x75\145\162\171"])); goto Ix66b; sbray: if (!($user && $user->role == "\141\144\x6d\x69\x6e")) { goto sE6Yv; } goto ic25q; deJL5: goto My00n; goto w0KkU; GnfaI: $q++; goto deJL5; bMnTT: $logs->write("\123\121\114", $sql); goto TfZfz; QXJl5: $logs = new Logs(Arr::last(explode("\134", get_class())) . "\x4c\x6f\x67"); goto M7hGP; w0KkU: enlH_: goto KI9nr; AAZvG: $results = []; goto sbray; XYuhe: My00n: goto ViQ7e; pImdz: $user = auth()->user(); goto QXJl5; TfZfz: cylbu: goto GnfaI; GU3ZB: return response()->json($results, 200); goto sTomd; M7hGP: $logs->write(__FUNCTION__, "\x53\124\x41\122\124"); goto OH3C4; AaKaU: $q = 0; goto XYuhe; TXuf4: return response()->json($results, 200); goto IB0CN; MbBPx: $queries = DB::getQueryLog(); goto AaKaU; sTomd: } public function store(Request $request) { goto nDpQ8; ETBXw: $result["\x6d\x65\x73\x73\141\x67\145"] = ''; goto ztjrl; nDpQ8: $logs = new Logs(Arr::last(explode("\x5c", get_class())) . "\114\157\147"); goto d7pMB; d7pMB: $logs->write(__FUNCTION__, "\123\x54\x41\122\124"); goto lLS3O; lLS3O: $result["\163\x74\141\164\165\163"] = 200; goto ETBXw; qSzCk: return response()->json($result["\x6d\145\163\x73\x61\147\x65"], $result["\x73\x74\141\x74\165\163"]); goto RhIBn; Zo3_o: try { goto cXbk6; TOaLn: BiSTT: goto Xe7tG; vqfIq: Yg7T_: goto OW7kS; LBz_v: goto Yg7T_; goto TOaLn; dAdEK: $q++; goto LBz_v; QOy8N: DB::commit(); goto ZrtlZ; aHxNI: goto koY_U; goto KeF_P; gOUBt: foreach ($request->all() as $key => $value) { goto j2mUB; IIiHL: XWgNy: goto MnGRt; Bz64M: if ($updated) { goto we3y1; } goto pqsqc; pqsqc: $error = true; goto p4y5t; p4y5t: we3y1: goto IIiHL; j2mUB: $updated = Parameter::where("\156\141\155\145", $key)->where("\x63\x6c\151\145\x6e\164\x5f\x69\144", "\75", $this->client_id)->update(["\166\x61\x6c\x75\x65" => $value != '' ? $value : 0, "\x75\x70\x64\141\x74\x65\x64\137\x61\164" => Carbon::now("\101\163\x69\141\x2f\112\141\x6b\x61\x72\x74\x61")]); goto Bz64M; MnGRt: } goto vRjBE; OW7kS: if (!($q < count($queries))) { goto BiSTT; } goto T3shv; b_4tO: $queries = DB::getQueryLog(); goto fCHvE; CThod: koY_U: goto b_4tO; lENXk: if ($error) { goto UNQdj; } goto QOy8N; lzteO: $logs->write("\x49\x4e\106\117", "\x46\141\x69\154\x65\144\x20\165\160\144\x61\x74\145\144"); goto F370C; hQ5T1: $result["\163\164\x61\164\x75\x73"] = 201; goto KF5lB; R7Ibk: $validatedData = $request->validate(["\141\x70\160\x5f\162\145\147\137\x6d\145\x6d\142\x65\x72" => "\x72\145\x71\x75\x69\162\145\x64\174\151\156\164\145\x67\145\x72", "\155\x61\x6b\x73\137\162\145\156\x74\x5f\x62\157\157\153" => "\162\145\161\x75\x69\x72\x65\144\174\x69\156\164\145\x67\x65\162", "\x72\145\147\x5f\x6d\x65\155\142\x65\162" => "\162\145\161\x75\x69\162\x65\144\x7c\151\x6e\164\x65\x67\145\162", "\x72\145\x6e\x74\x5f\x62\157\157\x6b" => "\x72\145\161\x75\151\162\145\x64\174\151\x6e\164\145\147\x65\x72"]); goto gOUBt; KeF_P: UNQdj: goto SWbd6; nYJIm: DB::beginTransaction(); goto R7Ibk; F370C: $result["\x6d\x65\163\x73\x61\x67\145"] = "\x46\x61\x69\154\x65\144\40\165\160\144\141\164\x65\144\56\74\x62\162\76"; goto CThod; cXbk6: DB::enableQueryLog(); goto nYJIm; vRjBE: iENUS: goto lENXk; byVKe: $logs->write("\123\x51\114", $queries[$q]["\x71\x75\x65\162\171"]); goto zECzQ; fCHvE: $q = 0; goto vqfIq; zECzQ: RTglY: goto dAdEK; T3shv: $logs->write("\x42\111\x4e\x44\111\116\107", "\133" . implode("\x2c\40", $queries[$q]["\x62\151\156\144\x69\x6e\147\163"]) . "\135"); goto byVKe; ZrtlZ: $logs->write("\x49\116\x46\117", "\x53\x75\143\143\145\x73\x73\146\x75\x6c\154\171\40\x75\160\144\141\164\x65\x64"); goto hQ5T1; SWbd6: DB::rollBack(); goto lzteO; KF5lB: $result["\155\x65\163\x73\x61\147\x65"] = "\x53\x75\143\x63\145\x73\x73\x66\165\154\x6c\171\x20\165\160\x64\x61\x74\x65\144\56"; goto aHxNI; Xe7tG: } catch (Exception $e) { goto j06dH; k1Enu: $result["\x6d\145\x73\163\x61\x67\145"] = "\106\x61\151\x6c\x65\144\x20\165\160\144\x61\x74\145\x64\x2e\x3c\142\162\76" . $th->getMessage(); goto eBJ8G; j06dH: DB::rollBack(); goto ixyLY; ixyLY: $logs->write("\105\122\x52\x4f\122", $th->getMessage()); goto k1Enu; eBJ8G: } goto qSzCk; ztjrl: $error = false; goto Zo3_o; RhIBn: } public function show(string $id) : JsonResponse { } public function update(Request $request, string $id) : JsonResponse { } public function destroy(string $id) : JsonResponse { return response()->json($id, 200); } }
